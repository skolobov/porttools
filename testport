#!/bin/sh
#
# FreeBSD Port Tools
#
# testport
# Scripts to automate testing a new port or port update before submitting 
# a FreeBSD Problem Report (PR)
#
# Copyright (c) 2003, Sergei Kolobov
# All rights reserved.
# 
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
# 
# THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
# OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
# OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
#
# $Id$
#

# Port Tools configuration file
CONFIG="${HOME}/.porttools"

# Commands to output a message with standard prefix
MSG='echo **> testport: '
ERROR='echo testport: Error '

# Run portlint(1) to validate port's sanity
${MSG} "Validating port with portlint"
PORTLINT_FLAGS="-abct"
portlint ${PORTLINT_FLAGS}
if [ $? -ne 0 ]
then
	${ERROR} "validating port"
	exit 1
fi

# Check to see the config file exists; generate one if not
if [ ! -f ${CONFIG} ]
then
	${MSG} "Generating ${CONFIG} configuration file"
	cat > ${CONFIG} <<- EOF
	# FreeBSD Port Tools configuration file
	# See pr-update(1)
	# vim: ft=sh
	EMAIL="${USER}@`hostname`"
	FULLNAME="`pw usershow -n ${USER} | cut -d: -f8`"
	ORGANIZATION=""
	BUILDROOT="/tmp"
	ARCHIVE_DIR=""
	EOF
fi

# Reading configuration file
${MSG} "Reading configuration from ${CONFIG}"
. ${CONFIG}

# Collect information about the port
PKGNAME="`make -V PKGNAME`"
PREFIX="${BUILDROOT:-/tmp}/${PKGNAME}"

# Parse command-line arguments
while [ -n "$1" ]
do
	case "$1" in
	-b)
		# Build only
		STOP="build"
		;;
	-i)
		# Build and install
		STOP="install"
		;;
	-p)
		# Build, install and package
		STOP="package"
		;;
	-c)
		# Do NOT clean before 
		NO_CLEAN_BEFORE="yes"
		;;
	-C)
		# Do NOT clean after 
		NO_CLEAN_AFTER="yes"
		;;
	--)
		shift;
		break;
		;;
	*)
		echo "fatal: unrecognized option: $1"
		exit 1
		;;
	esac
	shift
done

# Create a temporary dir for temporary package database
PKG_DBDIR="`mktemp -d -t pkg_db`" || exit 1

# Display FLAGS
PORT_FLAGS="PREFIX=${PREFIX} PKG_DBDIR=${PKG_DBDIR} $*"
${MSG} "flags: ${PORT_FLAGS}"

# Start with a clean workspace
if [ "${NO_CLEAN_BEFORE}" != "yes" ]
then
	${MSG} "Cleaning workspace before build"
	make clean
	sudo rm -rf ${PREFIX} ${PKG_DBDIR}
fi

# Go through the build phases
for PHASE in build install package deinstall
do
	SUDO="sudo"
	if [ "${PHASE}" = "build" ]; then
		SUDO=""
	fi

	${SUDO} make ${PORT_FLAGS} ${PHASE}
	if [ $? -gt 0 ]; then
		${ERROR} "running make ${PHASE}"
		exit 1
	fi

	if [ "${PHASE}" = "${STOP}" ]
	then
		break
	fi
done

# Check for extra files left
${MSG} "Extra files check"
find ${PREFIX} ! -type d

# Finish with a clean workspace
if [ "${NO_CLEAN_AFTER}" != "yes" ]
then
	${MSG} "Cleaning up after deinstall"
	make clean
	sudo rm -rf ${PREFIX} ${PKG_DBDIR}
fi

${MSG} "Done."
exit 0
