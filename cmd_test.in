# cmd_test
# Module for port(1)
# SUMMARY: test port (build, install, package, deinstall)
#
# $Id$
#

# Check if this script is run via port(1)
if [ "${PORTTOOLS}" = "" ]
then
	echo "This script should be run via port(1) front-end"
	exit 1
fi

# Usage
usage ()
{
cat << EOF
FreeBSD Port Tools __VERSION__
Usage: testport [-h ] [-lLbipdcC] [-- <port knobs>]
	-h	Display this usage summary
	-l	Run portlint(1) only
	-L	Do NOT run portlint(1)
	-b	Stop after 'make build' phase
	-i	Stop after 'make install' phase
	-p	Stop after 'make package' phase
	-c	Do NOT clean before
	-C	Do NOT clean after
EOF
}

# Defaults
RUN_PORTLINT="yes"
CLEAN_BEFORE="yes"
CLEAN_AFTER="yes"

# Parse command line arguments
ARGS=`/usr/bin/getopt hlLbipcC $*`
if [ $? != 0 ]
then
	echo "Error: invalid arguments"
	usage
	exit 2
fi

set -- $ARGS
for i 
do
	case "$i" in
	-h)	# help
		usage
		exit 0
		;;
	-l)	# run portlint(1) only
		STOP="lint"
		;;
	-L)	# do NOT run portlint(1)
		RUN_PORTLINT="no"
		;;
	-b)	# stop after build phase
		STOP="build"
		;;
	-i)	# stop after install phase
		STOP="install"
		;;
	-p) 	# stop after package phase
		STOP="package"
		;;
	-c)	# Do NOT clean before 
		CLEAN_BEFORE="no"
		;;
	-C)	# Do NOT clean after 
		CLEAN_AFTER="no"
		;;
	--)	# End of option list
		shift
		break;
		;;
	esac
	shift
done

# Run portlint(1) to validate port's sanity
if [ "${RUN_PORTLINT}" = "yes" ]
then
	echo "===> Validating port with portlint"
	PORTLINT_FLAGS="-abct"
	portlint ${PORTLINT_FLAGS}
	if [ $? -ne 0 ]
	then
		echo "Error validating port"
		exit 1
	fi
	[ "${STOP}" = "lint" ] && exit 0
else
	echo "===> WARNING: skipping running portlint(1)"
fi

# Collect information about the port
PKGNAME="`make -V PKGNAME`"
PREFIX="${BUILDROOT:-/tmp}/${PKGNAME}"

# Create a temporary dir for temporary package database
PKG_DBDIR="`mktemp -d -t pkg_db`" || exit 1

# Display FLAGS
PORT_FLAGS="PREFIX=${PREFIX} PKG_DBDIR=${PKG_DBDIR} $*"
echo "===> flags: ${PORT_FLAGS}"

# Start with a clean workspace
if [ "${CLEAN_BEFORE}" = "yes" ]
then
	echo "===> Cleaning workspace before testport"
	make clean
	sudo rm -rf ${PREFIX}
fi

# Go through the build phases
for PHASE in build install package deinstall
do
	SUDO="sudo"
	[ "${PHASE}" = "build" ] && SUDO=""

	${SUDO} make ${PORT_FLAGS} ${PHASE}
	if [ $? -gt 0 ]; then
		echo "Error running make ${PHASE}"
		echo "===> Cleaning up"
		sudo rm -rf ${PREFIX} ${PKG_DBDIR}
		exit 1
	fi

	[ "${PHASE}" = "${STOP}" ] && break
done

# Check for extra files left
echo "===> Extra files check"
if [ -d ${PREFIX} ]
then
	find ${PREFIX} ! -type d | egrep -v "${PREFIX}/share/nls/(POSIX|en_US.US-ASCII)"
fi

# Finish with a clean workspace
if [ "${CLEAN_AFTER}" = "yes" ]
then
	echo "===> Cleaning up after testport"
	make clean
	sudo rm -rf ${PREFIX} ${PKG_DBDIR}
fi

echo "===> Done."
exit 0
